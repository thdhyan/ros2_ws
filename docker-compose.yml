# ROS2 Workspace Docker Compose Configuration
# This file orchestrates all the nodes in the workspace

x-common-config: &common-config
  # Common volumes for all services
  volumes:
    # - ./src:/ros2_ws/src    
    - ./data:/ros2_ws/data_collection           # Mount only the src directory
    # - ./build:/ros2_ws/build              # Mount the build directory
    # - ./install:/ros2_ws/install          # Mount the install directory
    - /tmp/.X11-unix:/tmp/.X11-unix:ro    # X11 socket
    - ${HOME}/.Xauthority:/home/root/.Xauthority # X11 authentication
    - /dev/dri:/dev/dri                   # GPU access
    - ./logs:/root/.ros/log/              # Mount logs directory

  # Common environment variables
  environment:
    - DISPLAY=${DISPLAY}
    - QT_X11_NO_MITSHM=1
    - NVIDIA_VISIBLE_DEVICES=all
    - NVIDIA_DRIVER_CAPABILITIES=all
    - TURTLEBOT3_MODEL=waffle
    - ROS_DOMAIN_ID=42
    - ROS_LOCALHOST_ONLY=0
    - ROS_DISTRO=humble
    - GZ_PARTITION=0
    - GZ_IP=127.0.0.1

  # Common settings
  user: root
  ipc: host
  network_mode: host
  privileged: true
  stop_grace_period: 2s
  mem_limit: 4g
  # Common runtime for GPU access
  runtime: nvidia

services:
  debug_node:
    build:
      context: .
      dockerfile: .devcontainer/debug_node/Dockerfile
    container_name: ros2_debug_node
    command: >
      bash -c "source /opt/ros/humble/setup.bash && 
              source /ros2_ws/install/setup.bash && 
              ros2 run debug_node debug_node &&
              tail -f /dev/null"
    restart: "no"
    volumes:
    - ./src:/ros2_ws/src    
    # - ./data:/ros2_ws/data              # Mount only the src directory
    # - ./build:/ros2_ws/build              # Mount the build directory
    # - ./install:/ros2_ws/install          # Mount the install directory
    - /tmp/.X11-unix:/tmp/.X11-unix:ro    # X11 socket
    - ${HOME}/.Xauthority:/home/root/.Xauthority # X11 authentication
    - /dev/dri:/dev/dri                   # GPU access
    - ./logs:/root/.ros/log/              # Mount logs directory

  # Common environment variables
    environment:
    - DISPLAY=${DISPLAY}
    - QT_X11_NO_MITSHM=1
    - NVIDIA_VISIBLE_DEVICES=all
    - NVIDIA_DRIVER_CAPABILITIES=all
    - TURTLEBOT3_MODEL=waffle
    - ROS_DOMAIN_ID=42
    - ROS_LOCALHOST_ONLY=0
    - ROS_DISTRO=humble
    - GZ_PARTITION=0
    - GZ_IP=127.0.0.1

  gazebo_node:
    <<: *common-config
    build:
      context: .
      dockerfile: .devcontainer/gazebo_node/Dockerfile
    container_name: ros2_gazebo_node
    command: >
      bash -c "source /opt/ros/humble/setup.bash && 
             colcon build --symlink-install &&
              source /ros2_ws/install/setup.bash && 
              ros2 launch gazebo_node gazebo.launch.py world_name:=small_house.world &&
              tail -f /dev/null"
    restart: "no"

  robot_node:
    <<: *common-config
    build:
      context: .
      dockerfile: .devcontainer/robot_node/Dockerfile
    container_name: ros2_robot_node
    command: >
      bash -c "source /opt/ros/humble/setup.bash && 
              source /ros2_ws/install/setup.bash && 
              ros2 launch robot_node spawn_robot.launch.py && 
              tail -f /dev/null"
    depends_on:
      - gazebo_node
    restart: "no"
    stop_grace_period: 5s  # Allow more time for clean shutdown of robot simulation

  explore_node:
    <<: *common-config
    build:
      context: .
      dockerfile: .devcontainer/explore_node/Dockerfile
    container_name: ros2_explore_node
    command: >
      bash -c "source /opt/ros/humble/setup.bash && 
              source /ros2_ws/install/setup.bash && 
              ros2 launch explore_node explore_node.launch.py &&
              tail -f /dev/null"
    entrypoint: ["/bin/bash", "-c", "source /opt/ros/humble/setup.bash && source /ros2_ws/install/setup.bash && ros2 launch explore_node explore_node.launch.py && tail -f /dev/null"]
    
  yolo_node:
    <<: *common-config
    build:
      context: src/yolo_ros
      dockerfile: Dockerfile
    container_name: ros2_yolo_node
    command: >
      bash -c ""
              source /ros2_ws/install/setup.bash &&
              ros2 launch yolo_bringup yolo.launch.py input_image_topic:=/camera/image_raw &&
              tail -f /dev/null"
    restart: "no"